/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface InsurancePolicyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyPolicy"
      | "claimCount"
      | "claims"
      | "createPolicy"
      | "getClaimCount"
      | "getPoliciesCount"
      | "getUserPoliciesCount"
      | "owner"
      | "policies"
      | "processClaim"
      | "submitClaim"
      | "userPolicies"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimProcessed"
      | "ClaimSubmitted"
      | "FundsWithdrawn"
      | "PolicyCreated"
      | "PolicyPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "buyPolicy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claims",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPolicy",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPoliciesCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPoliciesCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processClaim",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitClaim",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userPolicies",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claims", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoliciesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPoliciesCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPolicies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace ClaimProcessedEvent {
  export type InputTuple = [claimId: BigNumberish, isApproved: boolean];
  export type OutputTuple = [claimId: bigint, isApproved: boolean];
  export interface OutputObject {
    claimId: bigint;
    isApproved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimSubmittedEvent {
  export type InputTuple = [
    claimId: BigNumberish,
    user: AddressLike,
    policyId: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    claimId: bigint,
    user: string,
    policyId: bigint,
    reason: string
  ];
  export interface OutputObject {
    claimId: bigint;
    user: string;
    policyId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsWithdrawnEvent {
  export type InputTuple = [owner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [owner: string, amount: bigint];
  export interface OutputObject {
    owner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyCreatedEvent {
  export type InputTuple = [
    policyId: BigNumberish,
    name: string,
    coverageAmount: BigNumberish,
    premiumAmount: BigNumberish
  ];
  export type OutputTuple = [
    policyId: bigint,
    name: string,
    coverageAmount: bigint,
    premiumAmount: bigint
  ];
  export interface OutputObject {
    policyId: bigint;
    name: string;
    coverageAmount: bigint;
    premiumAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyPurchasedEvent {
  export type InputTuple = [
    user: AddressLike,
    policyId: BigNumberish,
    startTime: BigNumberish,
    expiryTime: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    policyId: bigint,
    startTime: bigint,
    expiryTime: bigint
  ];
  export interface OutputObject {
    user: string;
    policyId: bigint;
    startTime: bigint;
    expiryTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface InsurancePolicy extends BaseContract {
  connect(runner?: ContractRunner | null): InsurancePolicy;
  waitForDeployment(): Promise<this>;

  interface: InsurancePolicyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyPolicy: TypedContractMethod<[_policyId: BigNumberish], [void], "payable">;

  claimCount: TypedContractMethod<[], [bigint], "view">;

  claims: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean, boolean] & {
        id: bigint;
        user: string;
        policyId: bigint;
        reason: string;
        timestamp: bigint;
        isApproved: boolean;
        isRejected: boolean;
      }
    ],
    "view"
  >;

  createPolicy: TypedContractMethod<
    [
      _name: string,
      _coverageAmount: BigNumberish,
      _premiumAmount: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getClaimCount: TypedContractMethod<[], [bigint], "view">;

  getPoliciesCount: TypedContractMethod<[], [bigint], "view">;

  getUserPoliciesCount: TypedContractMethod<
    [_user: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  policies: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        coverageAmount: bigint;
        premiumAmount: bigint;
        duration: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  processClaim: TypedContractMethod<
    [_claimId: BigNumberish, _approve: boolean],
    [void],
    "nonpayable"
  >;

  submitClaim: TypedContractMethod<
    [_policyId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  userPolicies: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        policyId: bigint;
        startTime: bigint;
        expiryTime: bigint;
        hasActiveClaim: boolean;
      }
    ],
    "view"
  >;

  withdrawFunds: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyPolicy"
  ): TypedContractMethod<[_policyId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "claimCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "claims"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean, boolean] & {
        id: bigint;
        user: string;
        policyId: bigint;
        reason: string;
        timestamp: bigint;
        isApproved: boolean;
        isRejected: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "createPolicy"
  ): TypedContractMethod<
    [
      _name: string,
      _coverageAmount: BigNumberish,
      _premiumAmount: BigNumberish,
      _duration: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getClaimCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoliciesCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserPoliciesCount"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "policies"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint, boolean] & {
        id: bigint;
        name: string;
        coverageAmount: bigint;
        premiumAmount: bigint;
        duration: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "processClaim"
  ): TypedContractMethod<
    [_claimId: BigNumberish, _approve: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitClaim"
  ): TypedContractMethod<
    [_policyId: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userPolicies"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        policyId: bigint;
        startTime: bigint;
        expiryTime: bigint;
        hasActiveClaim: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "ClaimProcessed"
  ): TypedContractEvent<
    ClaimProcessedEvent.InputTuple,
    ClaimProcessedEvent.OutputTuple,
    ClaimProcessedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimSubmitted"
  ): TypedContractEvent<
    ClaimSubmittedEvent.InputTuple,
    ClaimSubmittedEvent.OutputTuple,
    ClaimSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "FundsWithdrawn"
  ): TypedContractEvent<
    FundsWithdrawnEvent.InputTuple,
    FundsWithdrawnEvent.OutputTuple,
    FundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PolicyCreated"
  ): TypedContractEvent<
    PolicyCreatedEvent.InputTuple,
    PolicyCreatedEvent.OutputTuple,
    PolicyCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PolicyPurchased"
  ): TypedContractEvent<
    PolicyPurchasedEvent.InputTuple,
    PolicyPurchasedEvent.OutputTuple,
    PolicyPurchasedEvent.OutputObject
  >;

  filters: {
    "ClaimProcessed(uint256,bool)": TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;
    ClaimProcessed: TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;

    "ClaimSubmitted(uint256,address,uint256,string)": TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;
    ClaimSubmitted: TypedContractEvent<
      ClaimSubmittedEvent.InputTuple,
      ClaimSubmittedEvent.OutputTuple,
      ClaimSubmittedEvent.OutputObject
    >;

    "FundsWithdrawn(address,uint256)": TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
    FundsWithdrawn: TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;

    "PolicyCreated(uint256,string,uint256,uint256)": TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;
    PolicyCreated: TypedContractEvent<
      PolicyCreatedEvent.InputTuple,
      PolicyCreatedEvent.OutputTuple,
      PolicyCreatedEvent.OutputObject
    >;

    "PolicyPurchased(address,uint256,uint256,uint256)": TypedContractEvent<
      PolicyPurchasedEvent.InputTuple,
      PolicyPurchasedEvent.OutputTuple,
      PolicyPurchasedEvent.OutputObject
    >;
    PolicyPurchased: TypedContractEvent<
      PolicyPurchasedEvent.InputTuple,
      PolicyPurchasedEvent.OutputTuple,
      PolicyPurchasedEvent.OutputObject
    >;
  };
}
